#pragma once
#ifndef __SHT_GRAPHICS_RENDERER_OPENGL_EXTENSIONS_H__
#define __SHT_GRAPHICS_RENDERER_OPENGL_EXTENSIONS_H__

#include "../../../../common/platform.h"

#ifdef TARGET_WINDOWS
#include <gl/GL.h>
#include <gl/GLU.h>

#include "../../../../extern/glext.h"
#endif

namespace gl
{
	// base pointers -- required
	PFNGLCLIENTACTIVETEXTUREARBPROC ClientActiveTextureARB;
	PFNGLACTIVETEXTUREARBPROC ActiveTextureARB;
	PFNGLGENERATEMIPMAPEXTPROC GenerateMipmapEXT;

	// shader pointers
	PFNGLDELETEOBJECTARBPROC DeleteObjectARB;
	PFNGLGETHANDLEARBPROC GetHandleARB;
	PFNGLDETACHOBJECTARBPROC DetachObjectARB;
	PFNGLCREATESHADEROBJECTARBPROC CreateShaderObjectARB;
	PFNGLSHADERSOURCEARBPROC ShaderSourceARB;
	PFNGLCOMPILESHADERARBPROC CompileShaderARB;
	PFNGLCREATEPROGRAMOBJECTARBPROC CreateProgramObjectARB;
	PFNGLATTACHOBJECTARBPROC AttachObjectARB;
	PFNGLLINKPROGRAMARBPROC LinkProgramARB;
	PFNGLVALIDATEPROGRAMARBPROC ValidateProgramARB;
	PFNGLUSEPROGRAMOBJECTARBPROC UseProgramObjectARB;
	PFNGLGETOBJECTPARAMETERIVARBPROC GetObjectParameterivARB;
	PFNGLGETINFOLOGARBPROC GetInfoLogARB;
	PFNGLUNIFORM1FARBPROC Uniform1fARB;
	PFNGLUNIFORM2FARBPROC Uniform2fARB;
	PFNGLUNIFORM3FARBPROC Uniform3fARB;
	PFNGLUNIFORM4FARBPROC Uniform4fARB;
	PFNGLUNIFORM1IARBPROC Uniform1iARB;
	PFNGLUNIFORM1FVARBPROC Uniform1fvARB;
	PFNGLUNIFORM2FVARBPROC Uniform2fvARB;
	PFNGLUNIFORM3FVARBPROC Uniform3fvARB;
	PFNGLUNIFORM4FVARBPROC Uniform4fvARB;
	PFNGLUNIFORMMATRIX2FVARBPROC UniformMatrix2fvARB;
	PFNGLUNIFORMMATRIX3FVARBPROC UniformMatrix3fvARB;
	PFNGLUNIFORMMATRIX4FVARBPROC UniformMatrix4fvARB;
	PFNGLGETUNIFORMLOCATIONARBPROC GetUniformLocationARB;
	PFNGLBINDATTRIBLOCATIONARBPROC BindAttribLocationARB;
	PFNGLGETATTRIBLOCATIONARBPROC GetAttribLocationARB;
	PFNGLVERTEXATTRIBPOINTERARBPROC VertexAttribPointerARB;
	PFNGLENABLEVERTEXATTRIBARRAYARBPROC EnableVertexAttribArrayARB;
	PFNGLDISABLEVERTEXATTRIBARRAYARBPROC DisableVertexAttribArrayARB;

	// VBO pointers
	PFNGLBINDBUFFERARBPROC    BindBufferARB;
	PFNGLBUFFERDATAARBPROC    BufferDataARB;
	PFNGLBUFFERSUBDATAARBPROC BufferSubDataARB;
	PFNGLDELETEBUFFERSARBPROC DeleteBuffersARB;
	PFNGLGENBUFFERSARBPROC    GenBuffersARB;
	PFNGLMAPBUFFERARBPROC     MapBufferARB;
	PFNGLUNMAPBUFFERARBPROC   UnmapBufferARB;

	// FBO pointers
	PFNGLBINDFRAMEBUFFEREXTPROC BindFramebufferEXT;
	PFNGLGENFRAMEBUFFERSEXTPROC GenFramebuffersEXT;
	PFNGLDELETEFRAMEBUFFERSEXTPROC DeleteFramebuffersEXT;
	PFNGLISFRAMEBUFFEREXTPROC IsFramebufferEXT;
	PFNGLBINDRENDERBUFFEREXTPROC BindRenderbufferEXT;
	PFNGLGENRENDERBUFFERSEXTPROC GenRenderbuffersEXT;
	PFNGLDELETERENDERBUFFERSEXTPROC DeleteRenderbuffersEXT;
	PFNGLISRENDERBUFFEREXTPROC IsRenderbufferEXT;
	PFNGLRENDERBUFFERSTORAGEEXTPROC RenderbufferStorageEXT;
	PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC FramebufferRenderbufferEXT;
	PFNGLFRAMEBUFFERTEXTURE1DEXTPROC FramebufferTexture1DEXT;
	PFNGLFRAMEBUFFERTEXTURE2DEXTPROC FramebufferTexture2DEXT;
	PFNGLFRAMEBUFFERTEXTURE3DEXTPROC FramebufferTexture3DEXT;
	PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC CheckFramebufferStatusEXT;
	PFNGLDRAWBUFFERSARBPROC DrawBuffersARB;

	bool GetPointers(void);
	bool GetShaderPointers(void);
	bool GetVBOPointers(void);
	bool GetFBOPointers(void);

	bool IsExtSupported(const char* szTargetExtension);
}

#endif